{"version":3,"sources":["components/InfoBox/InfoBox.js","components/Map/LocationMarker.js","utils.js","components/Map/Map.js","components/Table/Table.js","components/LineGraph/LineGraph.js","App.js","index.js"],"names":["useStyle","makeStyles","custom_purple","backgroundColor","color","InfoBox","active","isRed","title","cases","total","props","classes","Card","onClick","className","CardContent","Typography","LocationMarker","center","map","useMapEvents","click","locate","locationfound","flyTo","getZoom","Marker","position","Popup","casesTypeColors","main","hex","multiplier","recovered","deaths","sortData","data","sort","a","b","prettyPrintStat","stat","numeral","format","showDataOnMap","casesType","country","Circle","countryInfo","lat","long","fillOpacity","fillColor","radius","Math","sqrt","style","backgroundImage","flag","DefaultIcon","L","icon","iconUrl","shadowUrl","iconShadow","prototype","options","Map","countries","zoom","MapContainer","scrollWheelZoom","TileLayer","attribution","url","Table","display","alignContent","src","alt","width","buildChartData","lastDataPoint","chartData","date","newDataPoint","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","fetchData","height","ResponsiveContainer","AreaChart","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","tickFormatter","value","Tooltip","formatter","Area","type","stroke","fill","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","mapCountries","setMapCountries","setCasesType","resp","name","iso2","sortedData","getCountriesData","allCountries","MenuItem","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","e","todayCases","todayRecovered","todayDeaths","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9b097b86.chunk.js","sourcesContent":["import { Card, CardContent, makeStyles, Typography } from \"@material-ui/core\";\nimport React from \"react\";\nimport \"./InfoBox.css\";\n\nconst useStyle = makeStyles({\n  custom_purple: {\n    backgroundColor: \"#473F97\",\n    color: \"white\",\n  },\n});\n\nfunction InfoBox({ active, isRed, title, cases, total, ...props }) {\n  const classes = useStyle();\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent className={classes.custom_purple}>\n        {/* Title i.e. Corona cases */}\n        <Typography className=\"infoBox__title\">{title}</Typography>\n        {/* No. of cases */}\n        <h2 className={`\"infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          {cases}\n        </h2>\n        \n        {/* Total cases */}\n        <Typography className=\"infoBox__total\">{total} Total</Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport { Marker, Popup, useMapEvents } from \"react-leaflet\";\n\nfunction LocationMarker({ center }) {\n  const map = useMapEvents({\n    click() {\n      map.locate();\n    },\n    locationfound() {\n      map.flyTo(center, map.getZoom());\n    },\n  });\n\n  return (\n    <Marker position={center}>\n      <Popup>You are here</Popup>\n    </Marker>\n  );\n}\n\nexport default LocationMarker;\n","import { Circle, Popup } from \"react-leaflet\";\nimport numeral from \"numeral\";\n\nexport const casesTypeColors = {\n  cases: {\n    main: \"#ff0000\",\n    hex: \"#CC1034\",\n    multiplier: 400,\n  },\n  recovered: {\n    main: \"#00ff00\",\n    hex: \"#7dd71d\",\n    multiplier: 600,\n  },\n  deaths: {\n    main: \"#ff0000\",\n    hex: \"#fb4443\",\n    multiplier: 2500,\n  },\n};\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\n// Draw circles on the map with interactive tooltip\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      key={country.country}\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      fillOpacity={0.4}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          />\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { MapContainer, TileLayer } from \"react-leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./Map.css\";\nimport L from \"leaflet\";\n\nimport icon from \"leaflet/dist/images/marker-icon.png\";\nimport iconShadow from \"leaflet/dist/images/marker-shadow.png\";\nimport LocationMarker from \"./LocationMarker\";\nimport { showDataOnMap } from \"../../utils\";\n\nlet DefaultIcon = L.icon({\n  iconUrl: icon,\n  shadowUrl: iconShadow,\n});\n\nL.Marker.prototype.options.icon = DefaultIcon;\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <MapContainer center={center} zoom={zoom} scrollWheelZoom={false}>\n        <TileLayer\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        <LocationMarker center={center} />\n        {showDataOnMap(countries, casesType)}\n      </MapContainer>\n    </div>\n  );\n}\n\nexport default Map;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map(({ countryInfo, country, cases }) => (\n        <tr\n          key={country}\n          style={{\n            display: \"flex\",\n            alignContent: \"center\",\n          }}\n        >\n          <td>\n            <img src={countryInfo.flag} alt=\"country\" width={50} />\n          </td>\n          <td>{country}</td>\n          <td>\n            <strong>{numeral(cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React, { useEffect, useState } from \"react\";\nimport numeral from \"numeral\";\nimport {\n  AreaChart,\n  Area,\n  XAxis,\n  YAxis,\n  CartesianGrid,\n  Tooltip,\n  ResponsiveContainer,\n} from \"recharts\";\nimport { casesTypeColors } from \"../../utils\";\n\n\nconst buildChartData = (data, casesType = \"cases\") => {\n  const chartData = [];\n  let lastDataPoint;\n  for (let date in data.cases) {\n    if (lastDataPoint) {\n      const newDataPoint = {\n        date: date,\n        cases: data[casesType][date] - lastDataPoint,\n      };\n      chartData.push(newDataPoint);\n    }\n    lastDataPoint = data[casesType][date];\n  }\n  return chartData;\n};\n\nfunction LineGraph({ casesType = \"cases\" }) {\n  const [data, setData] = useState({});\n\n  const url = \"https://disease.sh/v3/covid-19/historical/all?lastdays=120\";\n\n  useEffect(() => {\n    const fetchData = async () => {\n      await fetch(url)\n        .then((response) => response.json())\n        .then((data) => {\n          let chartData = buildChartData(data, casesType);\n          setData(chartData);\n        });\n    };\n    fetchData();\n  }, [casesType]);\n\n  return (\n    <div style={{ width: \"100%\", height: 300 }}>\n      <ResponsiveContainer>\n        <AreaChart width={400} height={400} data={data}>\n          <CartesianGrid strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"date\" />\n          <YAxis tickFormatter={(value) => numeral(value).format(\"0a\")} />\n          <Tooltip formatter={(value) => numeral(value).format(\"+0,0\")} />\n          <Area\n            type=\"monotone\"\n            dataKey=\"cases\"\n            stroke={casesTypeColors[casesType].main}\n            fill={casesTypeColors[casesType].hex}\n          />\n        </AreaChart>\n      </ResponsiveContainer>\n    </div>\n  );\n}\n\nexport default LineGraph;\n","import React, { useEffect, useState } from \"react\";\nimport numeral from \"numeral\";\nimport { Select, MenuItem, Card, FormControl } from \"@material-ui/core\";\nimport InfoBox from \"./components/InfoBox/InfoBox\";\nimport Map from \"./components/Map/Map\";\nimport Table from \"./components/Table/Table\";\nimport { prettyPrintStat, sortData } from \"./utils\";\nimport LineGraph from \"./components/LineGraph/LineGraph\";\nimport \"./App.css\";\n\n// https://disease.sh/v3/covid-19/countries\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(2);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((resp) => resp.json())\n        .then((data) => {\n          const countries = data.map(({ country, countryInfo }) => ({\n            name: country,\n            value: countryInfo.iso2,\n          }));\n          const sortedData = sortData(data);\n          setCountries(countries);\n          setTableData(sortedData);\n          setMapCountries(data);\n        });\n    };\n    getCountriesData();\n  }, []);\n\n  const allCountries = countries.map(({ name, value }) => {\n    return (\n      <MenuItem key={name} value={value}>\n        {name}\n      </MenuItem>\n    );\n  });\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(3);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          {/* Header with countries */}\n          <h1>COVID-19 TRACKER</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {allCountries}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/* InfoBoxes */}\n        <div className=\"app__stats\">\n          <InfoBox\n            isRed\n            active={casesType === \"cases\"}\n            onClick={(e) => setCasesType(\"cases\")}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n            title=\"Coronavirus Cases\"\n          />\n          <InfoBox\n            active={casesType === \"recovered\"}\n            onClick={(e) => setCasesType(\"recovered\")}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n            title=\"Recovered\"\n          />\n          <InfoBox\n            isRed\n            active={casesType === \"deaths\"}\n            onClick={(e) => setCasesType(\"deaths\")}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n            title=\"Deaths\"\n          />\n        </div>\n        {/* Map */}\n        <Map\n          casesType={casesType}\n          countries={mapCountries}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n\n      <Card className=\"app__right\">\n        {/* Table */}\n        <h3>Live Cases by Country</h3>\n        <Table countries={tableData} />\n\n        {/* Graph */}\n        <h3>Worldwide new {casesType}</h3>\n        <LineGraph casesType={casesType} />\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}